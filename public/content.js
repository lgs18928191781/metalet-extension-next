(function(){"use strict";const m=(t=32)=>{let r="";const c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let i=0;i<t;i++)r+=c.charAt(Math.floor(Math.random()*c.length));return r};async function n(t,r="authorize",c){const i=`${r}-${t}`,f=m(16),T=window.location.host;window.postMessage({nonce:f,channel:"to-metaidwallet",action:i,host:T,icon:"",params:c||{}},"*");const K=a=>{const o=e=>{var d,l,g,h;if(!(e.source!==window||((d=e.data)==null?void 0:d.channel)!=="from-metaidwallet")){if(((l=e.data)==null?void 0:l.nonce)===f){if(window.removeEventListener("message",o),(h=(g=e.data)==null?void 0:g.res)!=null&&h.error)throw new Error(e.data.res.error);a&&typeof a=="function"&&a(e.data)}return!0}};window.addEventListener("message",o)};return await new Promise(a=>{K(o=>{a(o.res)})})}async function s(){return await n("Connect")}async function u(){return await n("Disconnect")}async function q(){return await n("IsConnected","query")}async function p(){return await n("GetNetwork","query")}async function A(){return await n("SwitchNetwork")}async function B(t){return await n("GetAddress","query",t)}async function E(t){return await n("GetPublicKey","query",t)}async function z(){return await n("GetXPublicKey","query")}async function w(){return await n("GetBalance","query")}async function G(t){return await n("EciesEncrypt","authorize",t)}async function b(t){return await n("EciesDecrypt","authorize",t)}async function k(t){return await n("SignTransaction","authorize",t)}async function M(t){return await n("Transfer","authorize",t)}async function P(t){return await n("Merge","authorize",t)}async function y(t){return await n("GetTokenBalance","query",t)}const S={connect:s,isConnected:q,disconnect:u,getNetwork:p,switchNetwork:A,getAddress:B,getPublicKey:E,getXPublicKey:z,getBalance:w,transfer:M,merge:P,signTransaction:k,eciesEncrypt:G,eciesDecrypt:b,token:{getBalance:y},nft:{},requestAccount:s,getAccount:s,exitAccount:u,getMvcBalance:w,getSensibleFtBalance:y};window.metaidwallet=S})();
