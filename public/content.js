(function(){"use strict";const l=(n=32)=>{let e="";const a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let r=0;r<n;r++)e+=a.charAt(Math.floor(Math.random()*a.length));return e};async function t(n,e="authorize",a){const r=`${e}-${n}`,d=l(16),k=window.location.host;window.postMessage({nonce:d,channel:"to-metaidwallet",action:r,host:k,icon:"",params:a||{}},"*");const x=i=>{const o=c=>{if(!(c.source!==window||c.data?.channel!=="from-metaidwallet")){if(c.data?.nonce===d){if(window.removeEventListener("message",o),c.data?.res?.error)throw new Error(c.data.res.error);i&&typeof i=="function"&&i(c.data)}return!0}};window.addEventListener("message",o)};return await new Promise(i=>{x(o=>{i(o.res)})})}async function s(){return await t("Connect")}async function u(){return await t("Disconnect")}async function h(){return await t("IsConnected","query")}async function m(){return await t("GetNetwork","query")}async function T(){return await t("SwitchNetwork")}async function B(n){return await t("GetAddress","query",n)}async function b(n){return await t("GetPublicKey","query",n)}async function q(){return await t("GetXPublicKey","query")}async function y(n){return await t("GetBalance","query",n)}async function G(n){return await t("GetUtxos","query",n)}async function S(n){return await t("EciesEncrypt","authorize",n)}async function P(n){return await t("EciesDecrypt","authorize",n)}async function p(n){return await t("SignMessage","authorize",n)}async function z(n){return await t("VerifySignature","query",n)}async function A(n){return await t("PreviewTransaction","query",n)}async function C(n){return await t("SignTransaction","authorize",n)}async function E(n){return await t("SignTransactions","authorize",n)}async function M(n){return await t("Transfer","authorize",n)}async function K(n){return await t("Merge","authorize",n)}async function w(n){return await t("GetTokenBalance","query",n)}const g={query:[{name:"getBalance",action:"GetBTCBalance"},{name:"getAddress",action:"GetBTCAddress"},{name:"getPublicKey",action:"GetBTCPublicKey"},{name:"getUtxos",action:"GetBTCUtxos"}],authorize:[{name:"signPsbt",action:"SignBTCPsbt"},{name:"signMessage",action:"SignBTCMessage"}]},f={connect:s,isConnected:h,disconnect:u,getNetwork:m,switchNetwork:T,getAddress:B,getPublicKey:b,getXPublicKey:q,getBalance:y,getUtxos:G,transfer:M,merge:K,previewTransaction:A,signTransaction:C,signTransactions:E,signMessage:p,verifySignature:z,eciesEncrypt:S,eciesDecrypt:P,token:{getBalance:w},nft:{},btc:{},requestAccount:s,getAccount:s,exitAccount:u,getMvcBalance:y,getSensibleFtBalance:w};Object.keys(g).forEach(n=>{const e=n;g[e].forEach(a=>{f.btc[a.name]=async r=>await t(a.action,e,r)})}),window.metaidwallet=f})();
